1:"$Sreact.fragment"
2:I[8826,["865","static/chunks/865-7ff2210bb17df8ef.js","408","static/chunks/408-b9055c8a9c24b30d.js","749","static/chunks/749-b5263dd68aac398d.js","177","static/chunks/app/layout-4c186d8a9c368cce.js"],"default"]
3:I[5565,[],""]
4:I[2905,[],""]
5:I[6493,["865","static/chunks/865-7ff2210bb17df8ef.js","408","static/chunks/408-b9055c8a9c24b30d.js","749","static/chunks/749-b5263dd68aac398d.js","177","static/chunks/app/layout-4c186d8a9c368cce.js"],"default"]
6:I[3445,["865","static/chunks/865-7ff2210bb17df8ef.js","408","static/chunks/408-b9055c8a9c24b30d.js","749","static/chunks/749-b5263dd68aac398d.js","177","static/chunks/app/layout-4c186d8a9c368cce.js"],"default"]
8:I[6368,[],"MetadataBoundary"]
a:I[6368,[],"OutletBoundary"]
d:I[9769,[],"AsyncMetadataOutlet"]
f:I[6368,[],"ViewportBoundary"]
11:I[4324,[],""]
:HL["/battlewithbytes.io/_next/static/css/b9db9220d5fd4210.css","style"]
:HL["/battlewithbytes.io/_next/static/css/b867d9e053a67aea.css","style"]
0:{"P":null,"b":"dkFbLA22yedimNuCE4OHD","p":"/battlewithbytes.io","c":["","blog","custom-protocol-bruh"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","custom-protocol-bruh","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/battlewithbytes.io/_next/static/css/b9db9220d5fd4210.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/x-icon","href":"/images/favicon.ico","sizes":"any"}],["$","link",null,{"rel":"apple-touch-icon","type":"image/x-icon","href":"/images/favicon.ico","sizes":"180x180"}],["$","link",null,{"rel":"shortcut icon","type":"image/x-icon","href":"/images/favicon.ico"}]]}],["$","body",null,{"className":"__variable_9eca1a __variable_c4c34c antialiased min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","div",null,{"className":"pt-16 flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","$L6",null,{}]]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","custom-protocol-bruh","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/battlewithbytes.io/_next/static/css/b867d9e053a67aea.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","yIs93-q2ZixoKQFV7SK0h",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[9769,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
15:I[6064,["865","static/chunks/865-7ff2210bb17df8ef.js","408","static/chunks/408-b9055c8a9c24b30d.js","64","static/chunks/64-c44a3e63270ab371.js","953","static/chunks/app/blog/%5Bslug%5D/page-c1bf50394cd47596.js"],"default",1]
16:T263d,"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    br: "br",
    code: "code",
    em: "em",
    h2: "h2",
    h3: "h3",
    img: "img",
    li: "li",
    ol: "ol",
    p: "p",
    strong: "strong",
    ul: "ul",
    ..._provideComponents(),
    ...props.components
  }, {CodeBlock, DropCap, RadixTabs} = _components;
  if (!CodeBlock) _missingMdxReference("CodeBlock", true);
  if (!DropCap) _missingMdxReference("DropCap", true);
  if (!RadixTabs) _missingMdxReference("RadixTabs", true);
  return _jsxs(_Fragment, {
    children: [_jsx(DropCap, {
      children: _jsxs(_components.p, {
        children: ["Saleae protocol analyzers (custom protocol decoders) must be written in ", _jsx("strong", {
          children: "C++"
        }), ". Currently, Saleae Logic only supports native analyzers written in C++ as DLLs—there is no official Python or JavaScript API for custom analyzers. In this post, we’ll walk through setting up Visual Studio Code on Windows for developing these DLLs, building a bare-bones C++ decoder for a simple custom protocol, and testing/integration in Saleae Logic."]
      })
    }), "\n", _jsx(_components.h2, {
      id: "overview-custom-protocol-decoder-for-saleae",
      children: _jsx(_components.a, {
        href: "#overview-custom-protocol-decoder-for-saleae",
        children: "Overview: Custom Protocol Decoder for Saleae"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["The goal of this project is to create a simple protocol decoder DLL in ", _jsx("strong", {
        children: "C++"
      }), " that:"]
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: "Parses a custom protocol frame."
      }), "\n", _jsx(_components.li, {
        children: "Checks for a start byte, a length byte, a payload, and a checksum."
      }), "\n", _jsx(_components.li, {
        children: "Integrates with the Saleae logic analyzer via the Saleae C++ SDK."
      }), "\n"]
    }), "\n", _jsx(RadixTabs, {
      tabs: [{
        label: 'Environment Setup',
        value: 'tab-setup',
        content: _jsxs(_Fragment, {
          children: [_jsx(_components.h3, {
            children: "Setting up Visual Studio Code"
          }), _jsx(_components.p, {
            children: "To build the DLL on Windows:"
          }), _jsxs(_components.ol, {
            children: [_jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Install Visual Studio Code:"
              }), "Download and install ", _jsx(_components.a, {
                href: "https://code.visualstudio.com/",
                children: "VS Code"
              }), " for Windows."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Install Extensions:"
              }), "Add the official ", _jsx(_components.em, {
                children: "C/C++"
              }), " extension and optionally the ", _jsx(_components.em, {
                children: "CMake Tools"
              }), " extension if you use CMake."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Install Build Tools:"
              }), "Make sure you have the ", _jsx(_components.a, {
                href: "https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022",
                children: "Visual Studio Build Tools"
              }), " installed with the MSVC compiler and Windows SDK."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Workspace Setup:"
              }), "Create a project folder, open it in VS Code, and configure your build system (using CMake or an MSVC project) to build a DLL."]
            })]
          }), _jsxs(_components.p, {
            children: [_jsx(_components.strong, {
              children: "Placeholder Image:"
            }), _jsx(_components.br, {}), _jsx(_components.img, {
              src: "./images/vscode-setup.png",
              alt: "Visual Studio Code Setup"
            })]
          })]
        })
      }, {
        label: 'Decoder Development',
        value: 'tab-decoder',
        content: _jsxs(_Fragment, {
          children: [_jsx(_components.h3, {
            children: "Building a Bare Bones Custom Protocol Decoder"
          }), _jsx(_components.p, {
            children: "The simple custom protocol format for our decoder is defined as follows:"
          }), _jsxs(_components.ul, {
            children: [_jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Start Byte:"
              }), " ", _jsx(_components.code, {
                children: "0xAA"
              })]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Length Byte:"
              }), " Indicates the number of payload bytes."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Payload:"
              }), " Contains the raw data."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Checksum:"
              }), " A basic checksum computed over the payload."]
            })]
          }), _jsx(_components.p, {
            children: "Below is a bare-bones C++ example for the protocol decoder DLL. Saleae's SDK will call this function with captured data:"
          }), _jsx(CodeBlock, {
            language: "cpp",
            code: `#include <windows.h>
#include <cstdint>
#include <vector>

// Exported function to decode the custom protocol.
extern "C" __declspec(dllexport) int decodeCustomProtocol(const uint8_t* data, int dataSize, std::vector<uint8_t>& output) {
  if (dataSize < 3 || data[0] != 0xAA) {
      return -1; // Invalid frame
  }

  uint8_t length = data[1];
  if (dataSize < (length + 3)) {
      return -2; // Not enough data
  }

  int sum = 0;
  for (int i = 0; i < length; i++) {
      output.push_back(data[2 + i]);
      sum += data[2 + i];
  }
  
  uint8_t expectedChecksum = static_cast<uint8_t>(sum & 0xFF);
  uint8_t receivedChecksum = data[2 + length];
  if (expectedChecksum != receivedChecksum) {
      return -3; // Checksum error
  }
  return 0; // Success
}

// DLL main entry point.
BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
  return TRUE;
}`
          }), _jsxs(_components.p, {
            children: [_jsx(_components.strong, {
              children: "Placeholder Image:"
            }), _jsx(_components.br, {}), _jsx(_components.img, {
              src: "./images/decoder-code-placeholder.png",
              alt: "Decoder Code Placeholder"
            })]
          })]
        })
      }, {
        label: 'Testing & Integration',
        value: 'tab-testing',
        content: _jsxs(_Fragment, {
          children: [_jsx(_components.h3, {
            children: "Testing and Integration"
          }), _jsxs(_components.ol, {
            children: [_jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Build the DLL:"
              }), "Configure your build system to compile the DLL and ensure the output is placed where Saleae's software can load it."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Integrate with Saleae:"
              }), "Follow Saleae’s ", _jsx(_components.a, {
                href: "https://support.saleae.com/hc/en-us/articles/360020540494-Protocol-Decoder-API",
                children: "protocol decoder documentation"
              }), " to load and test your DLL."]
            }), _jsxs(_components.li, {
              children: [_jsx(_components.strong, {
                children: "Debug:"
              }), "Use VS Code’s debugging capabilities by attaching to the Saleae process or adding logging to capture the decoder’s behavior."]
            })]
          }), _jsxs(_components.p, {
            children: [_jsx(_components.strong, {
              children: "Placeholder Image:"
            }), _jsx(_components.br, {}), _jsx(_components.img, {
              src: "./images/setup-diagram-placeholder.png",
              alt: "Setup Diagram Placeholder"
            })]
          })]
        })
      }]
    }), "\n", _jsx(_components.h2, {
      id: "conclusion",
      children: _jsx(_components.a, {
        href: "#conclusion",
        children: "Conclusion"
      })
    }), "\n", _jsx(_components.p, {
      children: "Using Visual Studio Code to develop a custom protocol decoder DLL for Saleae's logic analyzer streamlines the development and debugging process. This guide provided an overview of setting up your environment, a basic implementation of a custom protocol decoder, and steps for integrating and testing the DLL with Saleae’s software."
    }), "\n", _jsx(_components.p, {
      children: "Happy coding!"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
7:["$","main",null,{"className":"min-h-screen py-16 px-4","children":["$","$L15",null,{"content":{"compiledSource":"$16","frontmatter":{},"scope":{}},"metadata":{"slug":"custom-protocol-bruh","title":"Custom protocol bruh?","date":"2025-04-15","excerpt":"Creating a custom protocol decoder for the Saleae logic analyzer.","tags":["saleae","firmware"],"author":"Riley Porter","coverImage":"/images/blog/custom-protocol-bruh/cover.png"}}]}]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"Custom protocol bruh? | Battle With Bytes"}],["$","meta","1",{"name":"description","content":"Creating a custom protocol decoder for the Saleae logic analyzer."}],["$","link","2",{"rel":"icon","href":"/battlewithbytes.io/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
